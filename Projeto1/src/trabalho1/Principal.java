/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Trabalho1;
import java.awt.ComponentOrientation;
import static java.lang.Double.parseDouble;
import static java.lang.Integer.parseInt;
import java.util.ArrayList;
import static javax.xml.bind.DatatypeConverter.parseString;
     



public class Principal extends javax.swing.JFrame {
    
   // cria um vetor dinamico de objetos das classes dos 3 tipos de conta
    
    
    
    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();    
   
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonIniciar = new javax.swing.JButton();
        FundoBemVindo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jButtonIniciar.setBackground(new java.awt.Color(102, 102, 102));
        jButtonIniciar.setFont(new java.awt.Font("Leelawadee", 1, 14)); // NOI18N
        jButtonIniciar.setForeground(new java.awt.Color(255, 255, 255));
        jButtonIniciar.setText("Clique Aqui para Iniciar");
        jButtonIniciar.setAlignmentY(0.0F);
        jButtonIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonIniciarActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonIniciar);
        jButtonIniciar.setBounds(90, 180, 240, 30);

        FundoBemVindo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/telaBemVindo.jpg"))); // NOI18N
        getContentPane().add(FundoBemVindo);
        FundoBemVindo.setBounds(0, 0, 416, 237);

        setSize(new java.awt.Dimension(429, 261));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    
    // recebe dados recebidos do cadastro comum e guarda em um vetor dinamico de objetos do tipo c.comum
    
    
    
    
    // cria um objeto da tela de cadastro comum
    CadastroContaComum tela2 = new CadastroContaComum();
    
    // mostra a tela de cadastro da conta comum ao clicar em  iniciar na tela 1
    private void jButtonIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonIniciarActionPerformed
        tela2.setVisible(true);
        dispose();
        
    }//GEN-LAST:event_jButtonIniciarActionPerformed
    // cria um objeto conta comum e preenche os valores passados
   
     
     /*                                                                                                          
        Contas contaComum = new Contas();        
        contaComum.setNome(tela2.getNomeComum());        
        contaComum.setNumero(parseInt(tela2.getNumeroComum()));
        contaComum.depositar(parseDouble(tela2.getSaldoComum()));
        contas.add(contaComum);        
        tela3.setVisible(true);*/
    
    /**
     * @param args the command line arguments
     */
    static ArrayList<ContaPoupanca> contaPoupanca = new ArrayList();
    static ArrayList<ContaEspecial> contaEspecial = new ArrayList();
    static ArrayList<Contas> contas = new ArrayList();
    
      
    public static void main(String args[]) {
      
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
        // cria array dinamico de objetos
        
                                         
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel FundoBemVindo;
    private javax.swing.JButton jButtonIniciar;
    // End of variables declaration//GEN-END:variables

    
    
    public void recebendoComum(String nome, int numero, double saldo){
       Contas novaConta = new Contas();
       novaConta.setNome(nome);
       novaConta.setNumero(numero);
       novaConta.depositar(saldo);
        
       contas.add(novaConta);
        
    }
    // retorna a posição do objeto que tem o numero da conta passado por parameto
    public int posicao(int num){
        for(int a = 0; a < contas.size(); a++)
        {
            if(contas.get(a).getNumero() == num)
                    return a;
        }
        for(int b = 0; b < contaPoupanca.size(); b++)
        {
            if(contas.get(b).getNumero() == num)
                    return b;
        }
        for(int c = 0; c < contaEspecial.size(); c++)
        {
            if(contas.get(c).getNumero() == num)
                    return c;
        }
        return 0;
    }
    //faz transferencia
      public void transferir(int num1,int num2, double valor){
        String tipoContaOrigem = tipoConta(num1);
        String tipoContaDestino =  tipoConta(num2);      
        int pOrigem = posicao(num1);
        int pDestino = posicao(num2);
        
        if(tipoContaOrigem == "comum" && tipoContaDestino == "comum"){
            contas.get(pOrigem).transferir(valor);
            contas.get(pDestino).depositar(valor);
        }
        else if(tipoContaOrigem == "comum" && tipoContaDestino == "poupanca"){
            contas.get(pOrigem).transferir(valor);
            contaPoupanca.get(pDestino).depositar(valor);
        }
        else if(tipoContaOrigem == "comum" && tipoContaDestino == "cheque especial"){
            contas.get(pOrigem).transferir(valor);
            contaEspecial.get(pDestino).depositar(valor);
        }
        else if(tipoContaOrigem == "poupanca" && tipoContaDestino == "poupanca"){
            contaPoupanca.get(pOrigem).transferir(valor);
            contaPoupanca.get(pDestino).depositar(valor);
        }
        else if(tipoContaOrigem == "poupanca" && tipoContaDestino == "cheque especial"){
            contaPoupanca.get(pOrigem).transferir(valor);
            contaEspecial.get(pDestino).depositar(valor);
        }
        else if(tipoContaOrigem == "poupanca" && tipoContaDestino == "comum"){
            contaPoupanca.get(pOrigem).transferir(valor);
            contas.get(pDestino).depositar(valor);
        }
        else if(tipoContaOrigem == "cheque especial" && tipoContaDestino == "cheque especial"){
            contaEspecial.get(pOrigem).transferir(valor);
            contaEspecial.get(pDestino).depositar(valor);
        }
        else if(tipoContaOrigem == "cheque especial" && tipoContaDestino == "comum"){
            contaEspecial.get(pOrigem).transferir(valor);
            contas.get(pDestino).depositar(valor);
        }
        else if(tipoContaOrigem == "cheque especial" && tipoContaDestino == "poupanca"){
            contaEspecial.get(pOrigem).transferir(valor);
            contaPoupanca.get(pDestino).depositar(valor);
        }
    }
      
      
    // recebe dados recebidos do cadastro poupanca e guarda em um vetor dinamico de objetos do tipo c.poupanca
    public void recebendoPoupanca(String nome, int numero, double saldo, double taxa){
       
        ContaPoupanca novaConta = new ContaPoupanca();
        novaConta.setNome(nome);
        novaConta.setNumero(numero);
        novaConta.depositar(saldo);
        if(taxa == 0)
            novaConta.reajustar();
        else
            novaConta.reajustar(taxa);
                
        contaPoupanca.add(novaConta);    
        
    }
    
    // fecha o programa
    public void encerrar(){
        System.exit(0);
    }
     // recebe dados recebidos do cadastro especial e guarda em um vetor dinamico de objetos do tipo c.especial
    public void recebendoEspecial(String nome, int numero, double saldo, int limite, double multa){
       
        ContaEspecial novaConta = new ContaEspecial();
        novaConta.setNome(nome);
        novaConta.setNumero(numero);
        novaConta.depositar(saldo);
        novaConta.setMulta(multa);
        novaConta.setLimite(limite);
        
        contaEspecial.add(novaConta);        
    }
    
    
    //retorna o tipo da conta
    public String tipoConta(int num){
                 
        for(int j = 0;j < contaEspecial.size(); j++){
            if(num == contaEspecial.get(j).getNumero()){            
                return "cheque especial";        
            }
            else if(num == contas.get(j).getNumero())
                return "comum";            
        }
        return "poupanca";
    }
    // reajusta o valor da conta poupanca
    public void reajustar(double taxa, int numero){        
        for(int j = 0; j < contaPoupanca.size();j++){
            if(contaPoupanca.get(j).getNumero() == numero){                
                if(taxa == 0)
                    contaPoupanca.get(j).reajustar();
                else
                    contaPoupanca.get(j).reajustar(taxa);
            }
        }
    }
    //recebe o numero da conta e retorna o nome do titular
    public String retornaTitular(int num){
       int j = 0;
       while(true){
            if(num == contas.get(j).getNumero()){            
                return contas.get(j).getNome();        
            }
            else if(num == contaPoupanca.get(j).getNumero()){
                return contaPoupanca.get(j).getNome();
            }
            else if(num == contaEspecial.get(j).getNumero())
                return contaEspecial.get(j).getNome();
    
            j++;
        }
    }
    
    // faz  o saque se possivel
     public Boolean sacar(int numero, double valor) {               
         
        for(int j = 0; j < contas.size();j++) {     
            if(contas.get(j).getNumero() == numero && contas.get(j).getSaldo() >= valor){               
                    contas.get(j).sacar(valor); 
                    return true;
            }                        
            else if(contaPoupanca.get(j).getNumero() == numero && contaPoupanca.get(j).getSaldo() >= valor){               
                    contaPoupanca.get(j).sacar(valor);   
                    contaPoupanca.get(j).getNome();
                    return true;                
            } 
            else if (contaEspecial.get(j).getNumero() == numero && contaEspecial.get(j).getSaldo() >= valor)
            {
                    contaEspecial.get(j).sacar(valor);
                    return true;
            }
            else if(contaEspecial.get(j).getNumero() == numero && (contaEspecial.get(j).getSaldo() + contaEspecial.get(j).getLimite()) >= valor){                
                    contaEspecial.get(j).descontar(valor);
                    contaEspecial.get(j).getNome();                    
                    return true;                
            }   
            j++;
        }
        return false;
     } 
     // faz deposito nas contas
     public void depositar(int num, double valor){        
        for(int j = 0; j < contas.size();j++){
            if(num == contas.get(j).getNumero()){            
                contas.get(j).depositar(valor);        
            }
            else if(num == contaPoupanca.get(j).getNumero()){
                contaPoupanca.get(j).depositar(valor);
            }
            else if(num == contaEspecial.get(j).getNumero())
                contaEspecial.get(j).depositar(valor);
            j++;
        }   
     }
}